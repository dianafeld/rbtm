#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        Tomograph.py
## 
## Project :     Tomograph
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      diana.ichalova$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Wrapper class for Source, Shutter, Motor, Detector classes"""

__all__ = ["Tomograph", "TomographClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
# ----- PROTECTED REGION ID(Tomograph.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	Tomograph.additionnal_import

## Device States Description
## UNKNOWN : 

class Tomograph(PyTango.Device_4Impl):
    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Tomograph.global_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	Tomograph.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.debug_stream("In __init__()")
        Tomograph.init_device(self)
        #----- PROTECTED REGION ID(Tomograph.__init__) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.__init__

    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Tomograph.delete_device) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        #----- PROTECTED REGION ID(Tomograph.init_device) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Tomograph.always_executed_hook) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.always_executed_hook

        #-----------------------------------------------------------------------------
        #    Tomograph read/write attribute methods
        #-----------------------------------------------------------------------------



        #----- PROTECTED REGION ID(Tomograph.initialize_dynamic_attributes) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.initialize_dynamic_attributes

    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Tomograph.read_attr_hardware) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    Tomograph command methods
    #-----------------------------------------------------------------------------

    def CloseShutter(self, argin):
        """ 
        
        :param argin: 
        :type: PyTango.DevLong
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In CloseShutter()")
        #----- PROTECTED REGION ID(Tomograph.CloseShutter) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.CloseShutter

    def GetCurrentPosition(self):
        """ Returns current motor position.
        
        :param : 
        :type: PyTango.DevVoid
        :return: Array of 3 numbers: horizontal position, vertical position, angle position
        :rtype: PyTango.DevVarShortArray """
        self.debug_stream("In GetCurrentPosition()")
        argout = [0]
        #----- PROTECTED REGION ID(Tomograph.GetCurrentPosition) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetCurrentPosition
        return argout

    def GetDetectorStatus(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.ConstDevString """
        self.debug_stream("In GetDetectorStatus()")
        argout = ''
        #----- PROTECTED REGION ID(Tomograph.GetDetectorStatus) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetDetectorStatus
        return argout

    def GetDevicesInfo(self):
        """ Returns information about available devices
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.ConstDevString """
        self.debug_stream("In GetDevicesInfo()")
        argout = ''
        #----- PROTECTED REGION ID(Tomograph.GetDevicesInfo) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetDevicesInfo
        return argout

    def GetMotorStatus(self):
        """ Returns motor information
        
        :param : 
        :type: PyTango.DevVoid
        :return: Information about motor
        :rtype: PyTango.ConstDevString """
        self.debug_stream("In GetMotorStatus()")
        argout = ''
        #----- PROTECTED REGION ID(Tomograph.GetMotorStatus) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetMotorStatus
        return argout

    def GetXRayShutterStatus(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.ConstDevString """
        self.debug_stream("In GetXRayShutterStatus()")
        argout = ''
        #----- PROTECTED REGION ID(Tomograph.GetXRayShutterStatus) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetXRayShutterStatus
        return argout

    def GetXRaySourceStatus(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.ConstDevString """
        self.debug_stream("In GetXRaySourceStatus()")
        argout = ''
        #----- PROTECTED REGION ID(Tomograph.GetXRaySourceStatus) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetXRaySourceStatus
        return argout

    def GotoPosition(self, argin):
        """ Sets motor to the given position
        
        :param argin: 3 numbers: horizontal position, vertical position, angle position
        :type: PyTango.DevVarShortArray
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In GotoPosition()")
        #----- PROTECTED REGION ID(Tomograph.GotoPosition) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GotoPosition

    def OpenShutter(self, argin):
        """ 
        
        :param argin: 
        :type: PyTango.DevLong
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In OpenShutter()")
        #----- PROTECTED REGION ID(Tomograph.OpenShutter) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.OpenShutter

    def ResetCurrentPosition(self):
        """ Sets current motor position to 0
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In ResetCurrentPosition()")
        #----- PROTECTED REGION ID(Tomograph.ResetCurrentPosition) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.ResetCurrentPosition

    def SelfTest(self):
        """ Tests equipment
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In SelfTest()")
        #----- PROTECTED REGION ID(Tomograph.SelfTest) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.SelfTest

    def SetOperatingMode(self, argin):
        """ 
        
        :param argin: voltage, current
        :type: PyTango.DevVarDoubleArray
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In SetOperatingMode()")
        #----- PROTECTED REGION ID(Tomograph.SetOperatingMode) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.SetOperatingMode

    def PowerOn(self):
        """ Turns on the X-ray source
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In PowerOn()")
        #----- PROTECTED REGION ID(Tomograph.PowerOn) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.PowerOn

    def PowerOff(self):
        """ Turns off the X-ray source
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In PowerOff()")
        #----- PROTECTED REGION ID(Tomograph.PowerOff) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.PowerOff

    def GetFrame(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.ConstDevString """
        self.debug_stream("In GetFrame()")
        argout = ''
        #----- PROTECTED REGION ID(Tomograph.GetFrame) ENABLED START -----#

        #----- PROTECTED REGION END -----#	//	Tomograph.GetFrame
        return argout


class TomographClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Tomograph.global_class_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	Tomograph.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`Tomograph.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""

        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback

                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
                #----- PROTECTED REGION ID(Tomograph.dyn_attr) ENABLED START -----#

                #----- PROTECTED REGION END -----#	//	Tomograph.dyn_attr

    #    Class Properties
    class_property_list = {
    }


    #    Device Properties
    device_property_list = {
    }


    #    Command definitions
    cmd_list = {
        'CloseShutter':
            [[PyTango.DevLong, "none"],
             [PyTango.DevVoid, "none"]],
        'GetCurrentPosition':
            [[PyTango.DevVoid, "none"],
             [PyTango.DevVarShortArray, "Array of 3 numbers: horizontal position, vertical position, angle position"]],
        'GetDetectorStatus':
            [[PyTango.DevVoid, "none"],
             [PyTango.ConstDevString, "none"]],
        'GetDevicesInfo':
            [[PyTango.DevVoid, "none"],
             [PyTango.ConstDevString, "none"]],
        'GetMotorStatus':
            [[PyTango.DevVoid, "none"],
             [PyTango.ConstDevString, "Information about motor"]],
        'GetXRayShutterStatus':
            [[PyTango.DevVoid, "none"],
             [PyTango.ConstDevString, "none"]],
        'GetXRaySourceStatus':
            [[PyTango.DevVoid, "none"],
             [PyTango.ConstDevString, "none"]],
        'GotoPosition':
            [[PyTango.DevVarShortArray, "3 numbers: horizontal position, vertical position, angle position"],
             [PyTango.DevVoid, "none"]],
        'OpenShutter':
            [[PyTango.DevLong, "none"],
             [PyTango.DevVoid, "none"]],
        'ResetCurrentPosition':
            [[PyTango.DevVoid, "none"],
             [PyTango.DevVoid, "none"]],
        'SelfTest':
            [[PyTango.DevVoid, "none"],
             [PyTango.DevVoid, "none"]],
        'SetOperatingMode':
            [[PyTango.DevVarDoubleArray, "voltage, current"],
             [PyTango.DevVoid, "none"]],
        'PowerOn':
            [[PyTango.DevVoid, "none"],
             [PyTango.DevVoid, "none"]],
        'PowerOff':
            [[PyTango.DevVoid, "none"],
             [PyTango.DevVoid, "none"]],
        'GetFrame':
            [[PyTango.DevVoid, "none"],
             [PyTango.ConstDevString, "none"]],
    }


    #    Attribute definitions
    attr_list = {
    }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(TomographClass, Tomograph, 'Tomograph')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed, e:
        print '-------> Received a DevFailed exception:', e
    except Exception, e:
        print '-------> An unforeseen exception occured....', e


if __name__ == '__main__':
    main()
