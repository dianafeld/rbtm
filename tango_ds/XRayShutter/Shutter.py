#	"$Name:  $";
#	"$Header:  $";
#=============================================================================
#
# file :        Shutter.py
#
# description : Python source for the Shutter and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                Shutter are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import serial 

ke24R = serial.Serial(4, timeout=1)

ke24R.write("$KE,IO,SET,1,0,S\r\n")
print ke24R.readline()
ke24R.write("$KE,WR,1,1\r\n")
print ke24R.readline()

ke24R.write("$KE,IO,SET,2,0,S\r\n")
print ke24R.readline()
ke24R.write("$KE,WR,2,1\r\n")
print ke24R.readline()

ke24R.write("$KE,IO,SET,3,0,S\r\n")
print ke24R.readline()
ke24R.write("$KE,WR,3,1\r\n")
print ke24R.readline()

ke24R.write("$KE,IO,SET,4,1,S\r\n")
print ke24R.readline()

ke24R.close()

def get_watch():
	ke24R = serial.Serial(4, timeout=1)
	inv = lambda x: (1,0)[int(x)]
	ke24R.write("$KE,RD,4\r\n")
	data = ke24R.readline()
	#print data	
	data = inv(data.split(',')[2].replace('\r\n', ''))
	#print data
	ke24R.write("$KE,WR,1," + str(data) + "\r\n")
	ke24R.readline()
	ke24R.close()
	
	return [True, False][int(data)]

def set_shutter(val):
	ke24R = serial.Serial(4, timeout=1)
	ke24R.write("$KE,REL,1," + str(val*1) + "\r\n")
	ke24R.readline()
	ke24R.close()

#==================================================================
#   Shutter Class Description:
#
#
#==================================================================


class Shutter(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self,cl, name):
		PyTango.Device_4Impl.__init__(self,cl,name)
		Shutter.init_device(self)

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.ON)
		self.get_device_properties(self.get_device_class())

#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
		print "In ", self.get_name(), "::always_excuted_hook()"

#==================================================================
#
#	Shutter read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self,data):
		print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#	Read Watch attribute
#------------------------------------------------------------------
	def read_Watch(self, attr):
		print "In ", self.get_name(), "::read_Watch()"
		
		#	Add your own code here
		
		attr_Watch_read = get_watch()
		attr.set_value(attr_Watch_read)


#------------------------------------------------------------------
#	Read Set attribute
#------------------------------------------------------------------
	def read_Set(self, attr):
		print "In ", self.get_name(), "::read_Set()"
		
		#	Add your own code here
		
		attr_Set_read = 1
		attr.set_value(attr_Set_read)


#------------------------------------------------------------------
#	Write Set attribute
#------------------------------------------------------------------
	def write_Set(self, attr):
		print "In ", self.get_name(), "::write_Set()"
		
		val = attr.get_write_value()
		set_shutter(val)
		print "Attribute value = ", val

		#	Add your own code here



#==================================================================
#
#	Shutter command methods
#
#==================================================================

#==================================================================
#
#	ShutterClass class definition
#
#==================================================================
class ShutterClass(PyTango.DeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		}


	#	Command definitions
	cmd_list = {
		}


	#	Attribute definitions
	attr_list = {
		'Watch':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ],
			{
				'Polling period':500,
			} ],
		'Set':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE]],
		}


#------------------------------------------------------------------
#	ShutterClass Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In ShutterClass  constructor"

#==================================================================
#
#	Shutter class main method
#
#==================================================================
if __name__ == '__main__':
	try:
		py = PyTango.Util(sys.argv)
		py.add_TgClass(ShutterClass,Shutter,'Shutter')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed,e:
		print '-------> Received a DevFailed exception:',e
	except Exception,e:
		print '-------> An unforeseen exception occured....',e
